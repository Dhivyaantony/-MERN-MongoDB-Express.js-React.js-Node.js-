{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\91974\\\\Desktop\\\\book your court\\\\book\\\\src\\\\Pages\\\\home.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect } from 'react';\nimport MainNavBar from '../Components/Common/MainNavBar';\nimport Footer from '../Components/Common/Footer';\nimport AxiosInstance from '../config/AxiosInstance';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction Home() {\n  _s();\n  useEffect(() => {\n    const getAllcourtData = async () => {\n      try {\n        const response = await AxiosInstance.get('/user/getAllcourtData');\n        // Handle the response data here\n        console.log('Court data:', response.data);\n      } catch (error) {\n        console.log('Error in getting data', error);\n      }\n    };\n\n    // Call the function when the component mounts\n    getAllcourtData();\n\n    // Cleanup function (optional)\n    return () => {\n      // Any cleanup code if needed\n    };\n  }, []); // The empty dependency array ensures that this effect runs only once, similar to componentDidMount\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(MainNavBar, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Footer, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n_s(Home, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n_c = Home;\nexport default Home;\nvar _c;\n$RefreshReg$(_c, \"Home\");","map":{"version":3,"names":["React","useEffect","MainNavBar","Footer","AxiosInstance","jsxDEV","_jsxDEV","Fragment","_Fragment","Home","_s","getAllcourtData","response","get","console","log","data","error","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/91974/Desktop/book your court/book/src/Pages/home.js"],"sourcesContent":["import React, { useEffect } from 'react';\r\nimport MainNavBar from '../Components/Common/MainNavBar';\r\nimport Footer from '../Components/Common/Footer';\r\nimport AxiosInstance from '../config/AxiosInstance';\r\n\r\nfunction Home() {\r\n  useEffect(() => {\r\n    const getAllcourtData = async () => {\r\n      try {\r\n        const response = await AxiosInstance.get('/user/getAllcourtData');\r\n        // Handle the response data here\r\n        console.log('Court data:', response.data);\r\n      } catch (error) {\r\n        console.log('Error in getting data', error);\r\n      }\r\n    };\r\n\r\n    // Call the function when the component mounts\r\n    getAllcourtData();\r\n\r\n    // Cleanup function (optional)\r\n    return () => {\r\n      // Any cleanup code if needed\r\n    };\r\n  }, []); // The empty dependency array ensures that this effect runs only once, similar to componentDidMount\r\n\r\n  return (\r\n    <>\r\n      <MainNavBar />\r\n      {/* Your home component content */}\r\n      <Footer />\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Home;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,QAAQ,OAAO;AACxC,OAAOC,UAAU,MAAM,iCAAiC;AACxD,OAAOC,MAAM,MAAM,6BAA6B;AAChD,OAAOC,aAAa,MAAM,yBAAyB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAAA,SAAAC,QAAA,IAAAC,SAAA;AAEpD,SAASC,IAAIA,CAAA,EAAG;EAAAC,EAAA;EACdT,SAAS,CAAC,MAAM;IACd,MAAMU,eAAe,GAAG,MAAAA,CAAA,KAAY;MAClC,IAAI;QACF,MAAMC,QAAQ,GAAG,MAAMR,aAAa,CAACS,GAAG,CAAC,uBAAuB,CAAC;QACjE;QACAC,OAAO,CAACC,GAAG,CAAC,aAAa,EAAEH,QAAQ,CAACI,IAAI,CAAC;MAC3C,CAAC,CAAC,OAAOC,KAAK,EAAE;QACdH,OAAO,CAACC,GAAG,CAAC,uBAAuB,EAAEE,KAAK,CAAC;MAC7C;IACF,CAAC;;IAED;IACAN,eAAe,CAAC,CAAC;;IAEjB;IACA,OAAO,MAAM;MACX;IAAA,CACD;EACH,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;;EAER,oBACEL,OAAA,CAAAE,SAAA;IAAAU,QAAA,gBACEZ,OAAA,CAACJ,UAAU;MAAAiB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eAEdhB,OAAA,CAACH,MAAM;MAAAgB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EAAA,eACV,CAAC;AAEP;AAACZ,EAAA,CA5BQD,IAAI;AAAAc,EAAA,GAAJd,IAAI;AA8Bb,eAAeA,IAAI;AAAC,IAAAc,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}